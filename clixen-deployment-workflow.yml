name: 🚀 Clixen Production Deployment

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  validate-environment:
    name: 🔍 Validate Environment Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Validate environment variables
        run: |
          echo "🔍 Checking for placeholder URLs in codebase..."
          
          # Check for placeholder Supabase URLs in source code
          if grep -r "your-project.supabase.co" clixen/apps/web/src/; then
            echo "❌ FAILED: Found placeholder Supabase URLs in source code"
            exit 1
          fi
          
          # Check for placeholder API keys
          if grep -r "your-anon-key" clixen/apps/web/src/; then
            echo "❌ FAILED: Found placeholder API keys in source code"
            exit 1
          fi
          
          echo "✅ No placeholder values found in source code"

      - name: Install dependencies
        working-directory: ./clixen
        run: pnpm install --frozen-lockfile

  build-and-validate:
    name: 🏗️ Build & Validate Production Assets
    runs-on: ubuntu-latest
    needs: validate-environment
    
    env:
      VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        working-directory: ./clixen
        run: pnpm install --frozen-lockfile

      - name: Build production assets
        working-directory: ./clixen/apps/web
        run: |
          echo "🏗️ Building production frontend..."
          pnpm run build

      - name: Validate build assets
        working-directory: ./clixen/apps/web
        run: |
          echo "🔍 Validating production build..."
          
          # Run the validation script
          chmod +x validate-build.sh
          ./validate-build.sh
          
          # Additional checks
          echo "🔍 Checking for environment variable injection..."
          if [ -z "$VITE_SUPABASE_URL" ]; then
            echo "❌ VITE_SUPABASE_URL not set in environment"
            exit 1
          fi
          
          # Verify real URLs are in the build
          if ! grep -r "$VITE_SUPABASE_URL" dist/; then
            echo "❌ Production Supabase URL not found in build assets"
            exit 1
          fi
          
          echo "✅ Build validation passed!"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: clixen-production-build
          path: clixen/apps/web/dist/
          retention-days: 30

  security-scan:
    name: 🛡️ Security & Dependency Scan
    runs-on: ubuntu-latest
    needs: validate-environment
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './clixen'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-validate, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment: production
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: clixen-production-build
          path: ./dist

      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          SERVER_HOST: ${{ secrets.EC2_HOST }}
          SERVER_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "🚀 Deploying to production server..."
          
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
          
          # Create deployment package
          tar -czf clixen-production.tar.gz -C dist .
          
          # Copy to server
          scp clixen-production.tar.gz $SERVER_USER@$SERVER_HOST:/tmp/
          
          # Deploy on server
          ssh $SERVER_USER@$SERVER_HOST << 'EOF'
            echo "📦 Extracting production build..."
            sudo rm -rf /var/www/html/*
            sudo tar -xzf /tmp/clixen-production.tar.gz -C /var/www/html/
            sudo systemctl restart apache2
            echo "✅ Deployment complete!"
          EOF

      - name: Verify deployment
        env:
          SERVER_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "🧪 Verifying deployment..."
          
          # Wait for server to restart
          sleep 10
          
          # Check if site is accessible
          if curl -f -s http://$SERVER_HOST > /dev/null; then
            echo "✅ Deployment verification passed!"
          else
            echo "❌ Deployment verification failed!"
            exit 1
          fi

  notify-success:
    name: 📢 Notify Deployment Success
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    
    steps:
      - name: Deployment success notification
        run: |
          echo "🎉 Clixen deployed successfully!"
          echo "🔗 Production URL: http://${{ secrets.EC2_HOST }}"
          echo "🧪 Test authentication with configured credentials"