{
  "name": "[USR-ai-agent] Smart Content Generator & Summarizer",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger-content",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "path": "webhook/content-generator/{{$randomString}}",
        "httpMethod": "POST",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-trigger-content",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 500]
    },
    {
      "parameters": {
        "jsCode": "// Content generation and summarization request processor\nconst input = $input.first().json;\n\n// Determine content operation type\nconst operation = input.operation || 'generate'; // 'generate', 'summarize', 'rewrite', 'translate'\nconst contentType = input.contentType || 'article'; // 'article', 'email', 'social', 'blog', 'report'\nconst tone = input.tone || 'professional'; // 'professional', 'casual', 'creative', 'technical'\nconst length = input.length || 'medium'; // 'short', 'medium', 'long'\nconst language = input.language || 'en';\n\n// Content specifications\nconst contentSpecs = {\n  article: {\n    structure: 'Introduction, main points, conclusion',\n    length: { short: '200-300 words', medium: '500-800 words', long: '1000-1500 words' },\n    style: 'informative with clear headings'\n  },\n  email: {\n    structure: 'Subject line, greeting, body, call-to-action, closing',\n    length: { short: '50-100 words', medium: '150-250 words', long: '300-400 words' },\n    style: 'clear and actionable'\n  },\n  social: {\n    structure: 'Hook, value, call-to-action, hashtags',\n    length: { short: '20-50 words', medium: '100-150 words', long: '200-280 words' },\n    style: 'engaging and shareable'\n  },\n  blog: {\n    structure: 'Title, intro, sections, conclusion, CTA',\n    length: { short: '300-500 words', medium: '800-1200 words', long: '1500-2500 words' },\n    style: 'conversational and valuable'\n  },\n  report: {\n    structure: 'Executive summary, findings, recommendations',\n    length: { short: '500-750 words', medium: '1000-1500 words', long: '2000-3000 words' },\n    style: 'formal and data-driven'\n  }\n};\n\n// Process input content for summarization/rewriting\nlet sourceContent = '';\nif (operation === 'summarize' || operation === 'rewrite' || operation === 'translate') {\n  sourceContent = input.content || input.text || 'No source content provided';\n}\n\n// Topic/prompt for generation\nconst topic = input.topic || input.prompt || 'AI and automation in business workflows';\n\n// Additional parameters\nconst targetAudience = input.audience || 'general';\nconst keywords = input.keywords || [];\nconst includeImages = input.includeImages || false;\n\nreturn [{\n  json: {\n    operation: operation,\n    contentType: contentType,\n    tone: tone,\n    length: length,\n    language: language,\n    topic: topic,\n    sourceContent: sourceContent,\n    targetAudience: targetAudience,\n    keywords: keywords,\n    specifications: contentSpecs[contentType],\n    timestamp: new Date().toISOString(),\n    requestId: `content-${Date.now()}`\n  }\n}];"
      },
      "id": "content-request-processor",
      "name": "Content Request Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [440, 400]
    },
    {
      "parameters": {
        "jsCode": "// AI prompt builder for different content operations\nconst request = $input.first().json;\n\nlet systemPrompt = '';\nlet userPrompt = '';\nlet temperature = 0.7;\nlet maxTokens = 1500;\n\nswitch(request.operation) {\n  case 'generate':\n    systemPrompt = `You are an expert ${request.contentType} writer. Create ${request.tone} content for ${request.targetAudience} audience. Structure: ${request.specifications.structure}. Style: ${request.specifications.style}. Target length: ${request.specifications.length[request.length]}.`;\n    \n    userPrompt = `Topic: ${request.topic}\\n\\n`;\n    if (request.keywords.length > 0) {\n      userPrompt += `Include these keywords: ${request.keywords.join(', ')}\\n\\n`;\n    }\n    userPrompt += `Please create a high-quality ${request.contentType} with a ${request.tone} tone.`;\n    temperature = 0.8;\n    maxTokens = request.length === 'long' ? 2500 : (request.length === 'medium' ? 1500 : 800);\n    break;\n    \n  case 'summarize':\n    systemPrompt = `You are an expert summarization specialist. Create concise, accurate summaries that capture key points, main arguments, and essential information. Maintain the original tone and perspective.`;\n    \n    userPrompt = `Please summarize this content in ${request.specifications.length[request.length]}:\\n\\n${request.sourceContent}`;\n    temperature = 0.3;\n    maxTokens = request.length === 'long' ? 1000 : (request.length === 'medium' ? 600 : 300);\n    break;\n    \n  case 'rewrite':\n    systemPrompt = `You are an expert content rewriter. Transform content while preserving meaning, improving clarity, and adapting tone to ${request.tone} style for ${request.targetAudience} audience.`;\n    \n    userPrompt = `Please rewrite this content with a ${request.tone} tone:\\n\\n${request.sourceContent}`;\n    temperature = 0.6;\n    maxTokens = Math.max(request.sourceContent.length * 1.5, 800);\n    break;\n    \n  case 'translate':\n    systemPrompt = `You are an expert translator. Provide accurate, natural translations that preserve meaning, tone, and cultural context. Adapt idioms and expressions appropriately.`;\n    \n    userPrompt = `Please translate this content to ${request.language}:\\n\\n${request.sourceContent}`;\n    temperature = 0.2;\n    maxTokens = Math.max(request.sourceContent.length * 1.2, 600);\n    break;\n    \n  default:\n    systemPrompt = 'You are a helpful content assistant.';\n    userPrompt = request.topic;\n}\n\nreturn [{\n  json: {\n    ...request,\n    aiConfig: {\n      systemPrompt: systemPrompt,\n      userPrompt: userPrompt,\n      temperature: temperature,\n      maxTokens: maxTokens,\n      model: request.length === 'long' ? 'gpt-4' : 'gpt-3.5-turbo'\n    }\n  }\n}];"
      },
      "id": "prompt-builder",
      "name": "AI Prompt Builder",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [640, 400]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "options": {
          "headers": {
            "Authorization": "Bearer {{ $env.OPENAI_API_KEY }}",
            "Content-Type": "application/json"
          },
          "body": {
            "model": "{{ $json.aiConfig.model }}",
            "messages": [
              {
                "role": "system",
                "content": "{{ $json.aiConfig.systemPrompt }}"
              },
              {
                "role": "user",
                "content": "{{ $json.aiConfig.userPrompt }}"
              }
            ],
            "temperature": "{{ $json.aiConfig.temperature }}",
            "max_tokens": "{{ $json.aiConfig.maxTokens }}"
          }
        }
      },
      "id": "ai-content-generation",
      "name": "AI Content Generation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [840, 400],
      "continueOnFail": true
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "options": {
          "headers": {
            "Authorization": "Bearer {{ $env.OPENAI_API_KEY }}",
            "Content-Type": "application/json"
          },
          "body": {
            "model": "gpt-3.5-turbo",
            "messages": [
              {
                "role": "system",
                "content": "You are a content quality analyst. Evaluate content on: clarity, engagement, structure, grammar, and relevance. Provide a score (1-10) and specific feedback."
              },
              {
                "role": "user",\n                "content": "Evaluate this {{ $('Content Request Processor').first().json.contentType }}: {{ $('AI Content Generation').first().json.choices?.[0]?.message?.content || 'No content generated' }}"\n              }\n            ],\n            "temperature": 0.3,\n            "max_tokens": 500\n          }\n        }\n      },\n      "id": "content-quality-analysis",\n      "name": "Content Quality Analysis",\n      "type": "n8n-nodes-base.httpRequest",\n      "typeVersion": 3,\n      "position": [840, 600],\n      "continueOnFail": true\n    },\n    {\n      "parameters": {\n        "jsCode": "// Content optimization and enhancement suggestions\nconst originalRequest = $('Content Request Processor').first().json;\nconst generatedContent = $('AI Content Generation').first().json;\nconst qualityAnalysis = $('Content Quality Analysis').first().json;\n\nlet content = 'Content generation failed';\nlet usage = {};\n\nif (generatedContent && generatedContent.choices && generatedContent.choices[0]) {\n  content = generatedContent.choices[0].message.content;\n  usage = generatedContent.usage || {};\n}\n\nlet qualityFeedback = 'Quality analysis unavailable';\nlet qualityScore = 0;\n\nif (qualityAnalysis && qualityAnalysis.choices && qualityAnalysis.choices[0]) {\n  qualityFeedback = qualityAnalysis.choices[0].message.content;\n  \n  // Try to extract numerical score\n  const scoreMatch = qualityFeedback.match(/\\b(\\d+(\\.\\d+)?)\\/10\\b|\\bscore.*?(\\d+(\\.\\d+)?)\\b/i);\n  if (scoreMatch) {\n    qualityScore = parseFloat(scoreMatch[1] || scoreMatch[3]);\n  }\n}\n\n// Generate optimization suggestions based on content type and quality\nlet optimizations = [];\nswitch(originalRequest.contentType) {\n  case 'email':\n    optimizations = [\n      'Add a compelling subject line if missing',\n      'Include clear call-to-action buttons',\n      'Personalize with recipient name/company',\n      'Keep paragraphs short for mobile reading',\n      'Test different subject lines for A/B testing'\n    ];\n    break;\n  case 'social':\n    optimizations = [\n      'Add relevant hashtags for discoverability',\n      'Include engaging visuals or emojis',\n      'Ask questions to encourage engagement',\n      'Time posting for optimal audience reach',\n      'Include clear call-to-action'\n    ];\n    break;\n  case 'blog':\n    optimizations = [\n      'Add SEO-optimized title and meta description',\n      'Include internal/external links',\n      'Break up text with subheadings and bullets',\n      'Add relevant images with alt text',\n      'Include author bio and social sharing buttons'\n    ];\n    break;\n  case 'article':\n    optimizations = [\n      'Add compelling headline and subheadings',\n      'Include data/statistics for credibility',\n      'Add quotes or expert opinions',\n      'Include actionable takeaways',\n      'Optimize for readability score'\n    ];\n    break;\n  default:\n    optimizations = [\n      'Review for clarity and conciseness',\n      'Check grammar and spelling',\n      'Ensure consistent tone throughout',\n      'Add specific examples or case studies',\n      'Include clear next steps or conclusions'\n    ];\n}\n\n// Content metrics calculation\nconst wordCount = content.split(/\\s+/).length;\nconst sentenceCount = content.split(/[.!?]+/).length;\nconst readabilityScore = Math.max(0, Math.min(100, 100 - (wordCount / sentenceCount * 2.5))); // Simplified readability\nconst avgWordsPerSentence = Math.round(wordCount / sentenceCount);\n\nreturn [{\n  json: {\n    success: true,\n    operation: originalRequest.operation,\n    contentType: originalRequest.contentType,\n    generatedContent: {\n      content: content,\n      wordCount: wordCount,\n      sentenceCount: sentenceCount,\n      avgWordsPerSentence: avgWordsPerSentence,\n      estimatedReadingTime: Math.ceil(wordCount / 200)\n    },\n    qualityMetrics: {\n      overallScore: qualityScore,\n      readabilityScore: Math.round(readabilityScore),\n      qualityFeedback: qualityFeedback\n    },\n    optimizations: optimizations,\n    aiMetrics: {\n      model: originalRequest.aiConfig?.model || 'gpt-3.5-turbo',\n      tokensUsed: usage.total_tokens || 0,\n      promptTokens: usage.prompt_tokens || 0,\n      completionTokens: usage.completion_tokens || 0,\n      estimatedCost: (usage.total_tokens || 0) * 0.00002\n    },\n    metadata: {\n      requestId: originalRequest.requestId,\n      processingTime: (Date.now() - new Date(originalRequest.timestamp).getTime()) / 1000,\n      generatedAt: new Date().toISOString()\n    }\n  }\n}];"
      },
      "id": "content-optimizer",
      "name": "Content Optimizer",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1040, 400]
    },
    {
      "parameters": {
        "jsCode": "// Format final output for display\nconst result = $input.first().json;\n\n// Create formatted display\nconst displayOutput = {\n  '🚀 CONTENT GENERATION RESULTS': '=' .repeat(50),\n  '': '',\n  '📋 Request Details': {\n    'Operation': result.operation.toUpperCase(),\n    'Content Type': result.contentType.toUpperCase(),\n    'Processing Time': `${result.metadata.processingTime} seconds`,\n    'Request ID': result.metadata.requestId\n  },\n  ' ': '',\n  '📝 Generated Content': {\n    'Content': result.generatedContent.content,\n    'Word Count': result.generatedContent.wordCount,\n    'Reading Time': `${result.generatedContent.estimatedReadingTime} minutes`,\n    'Avg Words/Sentence': result.generatedContent.avgWordsPerSentence\n  },\n  '  ': '',\n  '⭐ Quality Assessment': {\n    'Overall Score': `${result.qualityMetrics.overallScore}/10`,\n    'Readability Score': `${result.qualityMetrics.readabilityScore}/100`,\n    'Quality Feedback': result.qualityMetrics.qualityFeedback\n  },\n  '   ': '',\n  '💡 Optimization Suggestions': result.optimizations,\n  '    ': '',\n  '🤖 AI Performance': {\n    'Model Used': result.aiMetrics.model,\n    'Total Tokens': result.aiMetrics.tokensUsed,\n    'Estimated Cost': `$${result.aiMetrics.estimatedCost.toFixed(4)}`,\n    'Efficiency': result.aiMetrics.tokensUsed > 0 ? \n      `${Math.round(result.generatedContent.wordCount / result.aiMetrics.tokensUsed * 100)} words per 100 tokens` : \n      'N/A'\n  }\n};\n\n// SEO and social media ready versions\nlet adaptedVersions = {};\n\nif (result.contentType === 'blog' || result.contentType === 'article') {\n  adaptedVersions.seoTitle = `${result.generatedContent.content.split('.')[0].substring(0, 60)}...`;\n  adaptedVersions.metaDescription = `${result.generatedContent.content.substring(0, 155)}...`;\n  adaptedVersions.socialPost = `${result.generatedContent.content.substring(0, 240)}... #AI #Content #Automation`;\n}\n\nif (result.contentType === 'email') {\n  adaptedVersions.subjectLine = result.generatedContent.content.split('\\n')[0];\n  adaptedVersions.previewText = result.generatedContent.content.split('\\n')[1]?.substring(0, 100);\n}\n\nreturn [{\n  json: {\n    displayOutput: displayOutput,\n    rawResult: result,\n    adaptedVersions: adaptedVersions,\n    summary: {\n      status: 'completed',\n      operation: result.operation,\n      contentType: result.contentType,\n      wordCount: result.generatedContent.wordCount,\n      qualityScore: result.qualityMetrics.overallScore,\n      cost: result.aiMetrics.estimatedCost\n    }\n  }\n}];"
      },
      "id": "format-final-output",
      "name": "Format Final Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1240, 400]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Content Request Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Content Request Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Request Processor": {
      "main": [
        [
          {
            "node": "AI Prompt Builder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Prompt Builder": {
      "main": [
        [
          {
            "node": "AI Content Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Content Generation": {
      "main": [
        [
          {
            "node": "Content Quality Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Quality Analysis": {
      "main": [
        [
          {
            "node": "Content Optimizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Optimizer": {
      "main": [
        [
          {
            "node": "Format Final Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "executionTimeout": 300,
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all"
  }
}